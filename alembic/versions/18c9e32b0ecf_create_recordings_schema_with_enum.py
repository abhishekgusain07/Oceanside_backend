"""Create recordings schema with enum

Revision ID: 18c9e32b0ecf
Revises: 
Create Date: 2025-06-23 23:49:49.899422

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '18c9e32b0ecf'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('feedback')
    op.drop_table('invoices')
    op.drop_table('subscriptions')
    op.drop_table('subscriptions_plans')
    op.drop_table('account')
    op.drop_table('verification')
    op.drop_table('user')
    op.drop_table('session')
    op.alter_column('guest_tokens', 'token',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('guest_tokens', 'guest_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.drop_constraint(op.f('guest_tokens_token_unique'), 'guest_tokens', type_='unique')
    op.create_index(op.f('ix_guest_tokens_token'), 'guest_tokens', ['token'], unique=True)
    op.drop_constraint(op.f('guest_tokens_recording_id_recordings_id_fk'), 'guest_tokens', type_='foreignkey')
    op.create_foreign_key(None, 'guest_tokens', 'recordings', ['recording_id'], ['id'])
    op.alter_column('recording_chunks', 'participant_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('recording_chunks', 'participant_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('recording_chunks', 'filename',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('recording_chunks', 'file_url',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=False)
    op.alter_column('recording_chunks', 'media_type',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.alter_column('recording_chunks', 'codec',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.drop_constraint(op.f('recording_chunks_recording_id_recordings_id_fk'), 'recording_chunks', type_='foreignkey')
    op.create_foreign_key(None, 'recording_chunks', 'recordings', ['recording_id'], ['id'])
    op.alter_column('recordings', 'room_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('recordings', 'host_user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('recordings', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('recordings', 'status',
               existing_type=postgresql.ENUM('created', 'active', 'processing', 'completed', 'failed', name='recording_status'),
               type_=sa.Enum('CREATED', 'ACTIVE', 'PROCESSING', 'COMPLETED', 'FAILED', name='recordingstatus'),
               existing_nullable=False,
               existing_server_default=sa.text("'created'::recording_status"))
    op.alter_column('recordings', 'video_url',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('recordings', 'thumbnail_url',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.drop_constraint(op.f('recordings_room_id_unique'), 'recordings', type_='unique')
    op.create_index(op.f('ix_recordings_host_user_id'), 'recordings', ['host_user_id'], unique=False)
    op.create_index(op.f('ix_recordings_room_id'), 'recordings', ['room_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_recordings_room_id'), table_name='recordings')
    op.drop_index(op.f('ix_recordings_host_user_id'), table_name='recordings')
    op.create_unique_constraint(op.f('recordings_room_id_unique'), 'recordings', ['room_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('recordings', 'thumbnail_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('recordings', 'video_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('recordings', 'status',
               existing_type=sa.Enum('CREATED', 'ACTIVE', 'PROCESSING', 'COMPLETED', 'FAILED', name='recordingstatus'),
               type_=postgresql.ENUM('created', 'active', 'processing', 'completed', 'failed', name='recording_status'),
               existing_nullable=False,
               existing_server_default=sa.text("'created'::recording_status"))
    op.alter_column('recordings', 'title',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('recordings', 'host_user_id',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('recordings', 'room_id',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'recording_chunks', type_='foreignkey')
    op.create_foreign_key(op.f('recording_chunks_recording_id_recordings_id_fk'), 'recording_chunks', 'recordings', ['recording_id'], ['id'], ondelete='CASCADE')
    op.alter_column('recording_chunks', 'codec',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('recording_chunks', 'media_type',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('recording_chunks', 'file_url',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('recording_chunks', 'filename',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('recording_chunks', 'participant_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('recording_chunks', 'participant_id',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'guest_tokens', type_='foreignkey')
    op.create_foreign_key(op.f('guest_tokens_recording_id_recordings_id_fk'), 'guest_tokens', 'recordings', ['recording_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_guest_tokens_token'), table_name='guest_tokens')
    op.create_unique_constraint(op.f('guest_tokens_token_unique'), 'guest_tokens', ['token'], postgresql_nulls_not_distinct=False)
    op.alter_column('guest_tokens', 'guest_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('guest_tokens', 'token',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_table('session',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('session_user_id_user_id_fk'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('session_pkey')),
    sa.UniqueConstraint('token', name=op.f('session_token_unique'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('user',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('subscription', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('onboarding_completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_unique', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('verification',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('verification_pkey'))
    )
    op.create_table('account',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('refresh_token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('account_user_id_user_id_fk'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('account_pkey'))
    )
    op.create_table('subscriptions_plans',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('currency', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('interval', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriptions_plans_pkey'))
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('subscription_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stripe_user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_payment_method_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriptions_pkey'))
    )
    op.create_table('invoices',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('invoice_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subscription_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount_paid', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount_due', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('currency', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('invoices_pkey'))
    )
    op.create_table('feedback',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('feedback_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stars', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('feedback_pkey'))
    )
    # ### end Alembic commands ### 